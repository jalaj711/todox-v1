{"version":3,"sources":["theme.js","serviceWorker.js","components/Snackbar.js","components/Confirm.js","pages/app.js","redux/store.js","index.js","redux/snackbarSlice.js"],"names":["theme","createMuiTheme","typography","fontFamily","palette","type","primary","main","secondary","contrastThreshold","tonalOffset","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CustomSnackbar","dispatch","useDispatch","open","useSelector","snackbar","text","showActionButton","actionButtonText","actionButtonClickCallback","handleClose","_evt","reason","closeSnackbar","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","Fragment","Button","color","size","onClick","evt","e","IconButton","aria-label","fontSize","ConfirmDialog","props","title","content","cancelButtonText","confirmButtonText","confirm","options","confirmCallback","closeCallback","setState","bind","handleConfirm","this","Dialog","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","React","Component","MobileDrawer","lazy","DesktopDrawer","Index","Lists","Create","Starred","Edit","ViewBy","SimpleLoader","Backdrop","CircularProgress","Home","isMobile","innerWidth","breakpoints","values","sm","isLoadingDb","prevVal","addEventListener","breakpoint","database","db","default","onsuccess","className","classes","root","fallback","toolbar","path","exact","component","to","withStyles","display","mixins","flexGrow","padding","spacing","configureStore","reducer","snackbarReducer","onLine","pathname","img","Image","src","onload","document","body","style","backgroundImage","String","prototype","capitalize","charAt","toUpperCase","slice","ReactDOM","render","StrictMode","ThemeProvider","store","CssBaseline","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","initialState","snackbarSlice","createSlice","name","reducers","openSnackbar","payload","actions"],"mappings":"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","file":"static/js/main.850d034d.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: `-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif`\n  },\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#a5ce0f\",\n    },\n    secondary: {\n      main: '#028bbf',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n});\n/*\nlight blue:#8DBBF2\npink: #FACEDF\nvery light skin: #FDEECC\nlight yellow: #FFE088\npurplish: #DC9CFD\ngreen: #9CE47C\nred: #F56A4E\nYELLOW: #f7c331\n*/\n\nexport default theme;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { closeSnackbar } from \"../redux/snackbarSlice\"\n\nexport default function CustomSnackbar() {\n  const dispatch = useDispatch()\n  const open = useSelector((state) => state.snackbar.open)\n  const text = useSelector((state) => state.snackbar.text)\n  const showActionButton = useSelector((state) => state.snackbar.showActionButton)\n  const actionButtonText = useSelector((state) => state.snackbar.actionButtonText)\n  const actionButtonClickCallback = useSelector((state) => state.snackbar.actionButtonClickCallback)\n\n  const handleClose = (_evt, reason) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n    dispatch(closeSnackbar())\n  }\n\n  let click = evt => {\n    handleClose()\n    try {\n      actionButtonClickCallback(evt)\n    } catch (e) {}\n  }\n\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\",\n        }}\n        open={open}\n        autoHideDuration={4000}\n        onClose={handleClose}\n        message={text}\n        action={\n          <React.Fragment>\n            {showActionButton ? (\n              <Button color=\"secondary\" size=\"small\" onClick={click}>\n                {actionButtonText}\n              </Button>\n            ) : (\n              \"\"\n            )}\n            <IconButton\n              size=\"small\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              onClick={handleClose}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          </React.Fragment>\n        }\n      />\n    </div>\n  )\n}\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogActions from \"@material-ui/core/DialogActions\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\n\nexport default class ConfirmDialog extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: \"Confirmation\",\n      content: \"Are you sure?\",\n      cancelButtonText: \"No\",\n      confirmButtonText: \"Yes\",\n      open: false,\n    }\n\n    window.confirm = (options, confirmCallback, closeCallback) => {\n      this.setState({\n        ...this.state,\n        ...options,\n        open: true,\n      })\n      this.closeCallback = closeCallback\n      this.confirmCallback = confirmCallback\n    }\n\n    this.handleClose = this.handleClose.bind(this)\n    this.handleConfirm = this.handleConfirm.bind(this)\n  }\n\n  handleClose() {\n    if (this.closeCallback) this.closeCallback()\n    this.setState({\n      ...this.state,\n      open: false,\n    })\n  }\n\n  handleConfirm() {\n    if (this.confirmCallback) this.confirmCallback()\n    this.setState({\n      ...this.state,\n      open: false,\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">{this.state.title}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              {this.state.text}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              {this.state.cancelButtonText}\n            </Button>\n            <Button onClick={this.handleConfirm} color=\"primary\" autoFocus>\n              {this.state.confirmButtonText}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    )\n  }\n}\n","import React, { Suspense } from \"react\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport { Backdrop, CircularProgress } from \"@material-ui/core\"\nimport { Switch, Route, Redirect } from \"react-router-dom\"\nimport Snackbar from \"../components/Snackbar\"\nimport Confirm from \"../components/Confirm\"\nimport theme from \"../theme\"\n\n//Lazy load components\nlet MobileDrawer = React.lazy(() => import(\"../components/MobileDrawer\"))\nlet DesktopDrawer = React.lazy(() => import(\"../components/DesktopDrawer\"))\n\n//Lazy load pages\nlet Index = React.lazy(() => import(\"./index\"))\nlet Lists = React.lazy(() => import(\"./lists\"))\nlet Create = React.lazy(() => import(\"./create\"))\nlet Starred = React.lazy(() => import(\"./starred\"))\nlet Edit = React.lazy(() => import(\"./edit\"))\nlet ViewBy = React.lazy(() => import(\"./viewby\"))\n\nconst SimpleLoader = () => (\n  <Backdrop open={true}>\n    <CircularProgress />\n  </Backdrop>\n)\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isMobile: window.innerWidth < theme.breakpoints.values.sm,\n      isLoadingDb: true,\n    }\n  }\n\n  componentDidMount() {\n    let prevVal = 0\n\n    window.addEventListener(\"resize\", () => {\n      let breakpoint = theme.breakpoints.values.sm\n      if ((breakpoint - prevVal) / (breakpoint - window.innerWidth) < 0) {\n        this.setState({ isMobile: window.innerWidth < breakpoint })\n      }\n      prevVal = window.innerWidth\n    })\n\n    /**\n     * This creates a database if one does not exist and then adds it to \n     * the window for global access.\n     */\n    if (!window.database) {\n      import(\"../database\").then(database => {\n        console.log(\"[indexedDB] Creating database instance\")\n        let db = new database.default();\n        db.onsuccess = _evt => {\n          window.database = db\n          this.setState({ isLoadingDb: false })\n        }\n      })\n    }\n  }\n\n  render() {\n    const { isLoadingDb } = this.state;\n\n    if (isLoadingDb) {\n      return <SimpleLoader />\n    }\n\n    return (\n      <div className={this.props.classes.root}>\n        <Snackbar />\n        <Confirm />\n        <Suspense fallback={<SimpleLoader />}>\n          {this.state.isMobile ? <MobileDrawer /> : <DesktopDrawer />}\n\n          <main className={this.props.classes.content}>\n            <div className={this.props.classes.toolbar} />\n            <Switch>\n              <Route path=\"/todox-v1\" exact component={Index} />\n              <Route path=\"/todox-v1/lists/:id\" component={Lists} />\n              <Route path=\"/todox-v1/new/:id\" component={Create} />\n              <Route path=\"/todox-v1/starred\" component={Starred} />\n              <Route path=\"/todox-v1/edit/:id\" component={Edit} />\n              <Route path=\"/todox-v1/viewby/:id\" component={ViewBy} />\n              <Redirect to=\"/todox\" />\n            </Switch>\n          </main>\n        </Suspense>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(theme => ({\n  root: {\n    display: \"flex\",\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))(Home)\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport snackbarReducer from \"./snackbarSlice\"\n\nexport default configureStore({\n  reducer: {\n    snackbar: snackbarReducer,\n  },\n})\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ThemeProvider, CssBaseline } from \"@material-ui/core\"\nimport theme from \"./theme\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport App from \"./pages/app\"\nimport store from './redux/store'\nimport { Provider } from 'react-redux'\n\nwindow.addEventListener(\"load\", () => {\n  if (navigator.onLine && window.location.pathname !== \"/\") {\n    let img = new Image()\n    img.src =\n      \"https://bing.biturl.top/?resolution=1920&format=image&index=0&mkt=zh-CN\"\n    img.onload = () => {\n      document.body.style.backgroundImage = \"url(\" + img.src + \")\"\n    }\n  }\n})\n\n//eslint-disable-next-line\nString.prototype.capitalize = function(){\n  return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <CssBaseline />\n          <App />\n        </Provider>\n      </ThemeProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  open: false,\n  text: \"Snackbar text\",\n  showActionButton: false,\n  actionButtonText: \"undo\",\n  actionButtonClickCallback: null,\n}\n\nexport const snackbarSlice = createSlice({\n  name: \"snackbar\",\n  initialState,\n  reducers: {\n    openSnackbar: (state, action) => {\n      state.open = true\n      state.text = action.payload.text || initialState.text\n      state.showActionButton = action.payload.showActionButton || initialState.showActionButton\n      state.actionButtonText = action.payload.actionButtonText || initialState.actionButtonText\n      state.actionButtonClickCallback = action.payload.actionButtonClickCallback || initialState.actionButtonClickCallback\n    },\n    closeSnackbar: (state) => {\n      state.open = false\n    },\n  },\n})\n\nexport const { openSnackbar, closeSnackbar } = snackbarSlice.actions\n\nexport default snackbarSlice.reducer"],"sourceRoot":""}