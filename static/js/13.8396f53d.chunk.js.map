{"version":3,"sources":["../node_modules/@material-ui/icons/esm/AddOutlined.js","pages/create.js"],"names":["createSvgIcon","React","createElement","d","CreateNew","props","state","lists","listname","importance","setReminder","reminder","Date","notifTimeDelta","classes","match","params","id","updateImportance","bind","updateListname","updateReminder","updateReminderTime","updateNotifDelta","validateDate","createTodo","window","setTitle","document","title","database","getMultipleByFilters","filter","val","setState","then","console","log","db","default","onsuccess","_evt","evt","this","target","value","checked","newDate","nameError","dateError","getElementById","days","hours","minutes","date","delta","sub","isPast","dateDelta","openSnackbar","text","showActionButton","todo_template","todo","Todo","description","parent","deadline","starred","done","status","add","result","history","goBack","className","root","autoComplete","input","variant","label","error","helperText","multiline","formControl","labelId","disabled","onChange","map","list","key","name","capitalize","reminders","reminderControl","component","grow","color","in","collapse","reminderOn","reminderOff","utils","DateFnsUtils","inputVariant","fabRight","onClick","fabIcon","fabLeft","Component","mapDispatchToProps","compose","withStyles","theme","display","maxHeight","margin","spacing","marginLeft","width","flexGrow","position","bottom","right","preset","left","innerWidth","breakpoints","values","sm","marginRight","borderRadius","border","padding","float","connect"],"mappings":"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","file":"static/js/13.8396f53d.chunk.js","sourcesContent":["import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'AddOutlined');","import React from \"react\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport {\n  Collapse,\n  Typography,\n  Switch,\n  Fab,\n  TextField,\n  FormControl,\n  Select,\n  InputLabel,\n  MenuItem,\n} from \"@material-ui/core\"\nimport { AddOutlined, CloseOutlined } from \"@material-ui/icons\"\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport sub from \"date-fns/sub\"\nimport isPast from \"date-fns/isPast\"\nimport dateDelta from \"date-fns/differenceInDays\"\nimport { openSnackbar } from '../redux/snackbarSlice'\nimport { compose } from 'recompose'\nimport { connect } from 'react-redux'\n//import { Link } from \"react-router-dom\"\n\nclass CreateNew extends React.Component {\n\n  state = {\n    lists: [],\n    listname: \"\",\n    importance: 0,\n    setReminder: false,\n    reminder: new Date(),\n    notifTimeDelta: 0.5,\n  }\n  constructor(props) {\n    super(props)\n    this.classes = props.classes\n    this.state.listname = props.match.params.id\n    this.updateImportance = this.updateImportance.bind(this)\n    this.updateListname = this.updateListname.bind(this)\n    this.updateReminder = this.updateReminder.bind(this)\n    this.updateReminderTime = this.updateReminderTime.bind(this)\n    this.updateNotifDelta = this.updateNotifDelta.bind(this)\n    this.validateDate = this.validateDate.bind(this)\n    this.createTodo = this.createTodo.bind(this)\n  }\n\n  componentDidMount() {\n    if (window.setTitle) window.setTitle(\"Create New Task\")\n    document.title = \"Create new task\"\n    if (!window.database) {\n      import(\"../database\").then(database => {\n        console.log(\"[indexedDB] Creating database instance\")\n        let db = new database.default()\n        db.onsuccess = _evt => {\n          window.database = db\n          db.getMultipleByFilters(\n            \"lists\",\n            \"name\",\n            {\n              filter: \"__ne\",\n              val: \"\",\n            },\n            lists => {\n              this.setState({\n                lists: lists,\n              })\n            }\n          )\n        }\n      })\n    } else {\n      window.database.getMultipleByFilters(\n        \"lists\",\n        \"name\",\n        {\n          filter: \"__ne\",\n          val: \"\",\n        },\n        lists => {\n          this.setState({\n            lists: lists,\n          })\n        }\n      )\n    }\n  }\n\n  updateListname(evt) {\n    this.setState({\n      ...this.state,\n      listname: evt.target.value,\n    })\n  }\n\n  updateImportance(evt) {\n    this.setState({\n      ...this.state,\n      importance: evt.target.value,\n    })\n  }\n\n  updateReminder(evt) {\n    this.setState({\n      ...this.state,\n      setReminder: evt.target.checked,\n    })\n  }\n  updateReminderTime(newDate) {\n    this.setState({\n      ...this.state,\n      reminder: newDate,\n    })\n  }\n\n  updateNotifDelta(evt) {\n    this.setState({\n      ...this.state,\n      notifTimeDelta: evt.target.value,\n    })\n  }\n\n  validateDate() {\n    this.setState({\n      ...this.state,\n      nameError: false,\n      dateError: false,\n    })\n    if (!document.getElementById(\"task-title\").value) {\n      this.setState({\n        ...this.state,\n        nameError: \"Please enter a title for the task\",\n      })\n    } else if (this.state.setReminder) {\n      let date = new Date(this.state.reminder)\n      let delta = this.state.notifTimeDelta\n      let days, hours, minutes\n      minutes = delta * 10\n      hours = (minutes - (minutes % 60)) / 60\n      minutes = minutes - hours * 60\n      days = (hours - (hours % 24)) / 24\n      hours = hours - days * 24\n      date = sub(date, {\n        days,\n        hours,\n        minutes,\n      })\n\n      if (isPast(date)) {\n        this.setState({\n          ...this.state,\n          dateError: \"You can not choose a past date!\",\n        })\n      } else {\n        if (dateDelta(date, new Date()) > 25) {\n          this.setState({\n            ...this.state,\n            dateError:\n              \"Cannot set reminder for a task that is due more than 25 days from now\",\n          })\n        } else {\n          if (!window.database) {\n            import(\"../database\").then(database => {\n              console.log(\"[indexedDB] Creating database instance\")\n              let db = new database.default()\n              db.onsuccess = _evt => {\n                window.database = db\n                this.createTodo(date, delta)\n              }\n            })\n          } else {\n            this.createTodo(date, delta)\n          }\n        }\n      }\n    } else {\n      if (!window.database) {\n        import(\"../database\").then(database => {\n          console.log(\"[indexedDB] Creating database instance\")\n          let db = new database.default()\n          db.onsuccess = _evt => {\n            window.database = db\n            this.createTodo(null)\n          }\n        })\n      } else {\n        this.createTodo(null)\n      }\n    }\n  }\n\n  createTodo(date, delta) {\n    this.props.openSnackbar({\n      text: \"Creating todo...\",\n      showActionButton: false,\n    })\n\n    import(\"../todo_template\").then(todo_template => {\n      let todo = new todo_template.default.Todo({\n        title: document.getElementById(\"task-title\").value,\n        description: document.getElementById(\"task-description\").value,\n        parent: this.state.listname,\n        reminder: date,\n        deadline: this.state.setReminder ? this.state.reminder : null,\n        starred: this.state.importance,\n        done: false,\n        status: 0,\n        notifTimeDelta: delta\n      }, () => {\n        window.database.add(\"tasks\", todo).onsuccess = (evt) => {\n          if(evt.target.result){\n            this.props.openSnackbar({\n              text: `Created todo.`,\n              showActionButton: false,\n            })\n            this.props.history.goBack()\n          }\n        }\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className={this.props.classes.root}>\n        <form autoComplete=\"false\">\n          <TextField\n            className={this.classes.input}\n            variant=\"outlined\"\n            label=\"Enter task name\"\n            id=\"task-title\"\n            autoComplete=\"off\"\n            error={this.state.nameError ? true : false}\n            helperText={this.state.nameError || \"\"}\n          />\n          <TextField\n            className={this.classes.input}\n            variant=\"outlined\"\n            autoComplete=\"off\"\n            id=\"task-description\"\n            label=\"Enter task details (Optional)\"\n            multiline\n          />\n          <FormControl variant=\"outlined\" className={this.classes.formControl}>\n            <InputLabel id=\"list-choosing-label\">\n              Choose where to add\n            </InputLabel>\n            <Select\n              labelId=\"list-choosing-label\"\n              id=\"list-chooser\"\n              value={this.state.lists ? this.state.listname : -1}\n              disabled={!this.state.lists}\n              onChange={this.updateListname}\n              label=\"Choose where to add\"\n            >\n              {this.state.lists ? (\n                this.state.lists.map(list => (\n                  <MenuItem value={list.id} key={list.id}>\n                    {list.name.capitalize()}\n                  </MenuItem>\n                ))\n              ) : (\n                <MenuItem value={-1}>Loading...</MenuItem>\n              )}\n            </Select>\n          </FormControl>\n          <FormControl variant=\"outlined\" className={this.classes.formControl}>\n            <InputLabel id=\"importance-choosing-label\">Important?</InputLabel>\n            <Select\n              labelId=\"importance-choosing-label\"\n              id=\"importance-chooser\"\n              value={this.state.importance}\n              onChange={this.updateImportance}\n              label=\"Important?\"\n            >\n              <MenuItem value={1}>Yes</MenuItem>\n              <MenuItem value={0}>No</MenuItem>\n            </Select>\n          </FormControl>\n          <div className={this.classes.reminders}>\n            <div className={this.classes.reminderControl}>\n              <Typography component=\"span\">Reminders</Typography>\n              <div className={this.classes.grow} />\n              <Switch\n                checked={this.state.setReminder}\n                onChange={this.updateReminder}\n                color=\"primary\"\n              />\n            </div>\n            <Collapse\n              in={this.state.setReminder}\n              className={`${this.classes.collapse} ${\n                this.state.setReminder\n                  ? this.classes.reminderOn\n                  : this.classes.reminderOff\n              }`}\n            >\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <DateTimePicker\n                  label=\"Pick a date & time\"\n                  variant=\"dialog\"\n                  inputVariant=\"outlined\"\n                  value={this.state.reminder}\n                  onChange={this.updateReminderTime}\n                  error={this.state.dateError ? true : false}\n                  helperText={this.state.dateError || \"\"}\n                />\n              </MuiPickersUtilsProvider>\n              <FormControl variant=\"outlined\">\n                <InputLabel id=\"notif-delta-choosing-label\">\n                  When should we remind you?\n                </InputLabel>\n                <Select\n                  labelId=\"notif-delta-choosing-label\"\n                  id=\"notif-delta-chooser\"\n                  value={this.state.notifTimeDelta}\n                  onChange={this.updateNotifDelta}\n                  label=\"When should we remind you?\"\n                >\n                  <MenuItem value={0.1}>1 min before</MenuItem>\n                  <MenuItem value={0.2}>2 min before</MenuItem>\n                  <MenuItem value={0.5}>5 min before</MenuItem>\n                  <MenuItem value={1.0}>10 min before</MenuItem>\n                  <MenuItem value={1.5}>15 min before</MenuItem>\n                  <MenuItem value={3}>30 min before</MenuItem>\n                  <MenuItem value={6}>1 hr before</MenuItem>\n                  <MenuItem value={12}>2 hr before</MenuItem>\n                  <MenuItem value={36}>6 hr before</MenuItem>\n                  <MenuItem value={144}>1 day before</MenuItem>\n                </Select>\n              </FormControl>\n            </Collapse>\n          </div>\n        </form>\n        <Fab\n          className={this.classes.fabRight}\n          variant=\"extended\"\n          color=\"primary\"\n          onClick={this.validateDate}\n        >\n          <AddOutlined className={this.classes.fabIcon} />\n          Add\n        </Fab>\n        <Fab\n          className={this.classes.fabLeft}\n          variant=\"extended\"\n          onClick={this.props.history.goBack}\n        >\n          <CloseOutlined className={this.classes.fabIcon} />\n          Cancel\n        </Fab>\n      </div>\n    )\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    display: \"block\",\n    maxHeight: \"calc(85vh - 70px)\"\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    marginLeft: 0,\n    width: \"45%\",\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  fabRight: {\n    position: \"fixed\",\n    bottom: 25,\n    right: 25,\n  },\n  fabLeft: () => {\n    let preset = {\n      position: \"fixed\",\n      bottom: 25,\n      left: 25,\n    }\n\n    if (window.innerWidth > theme.breakpoints.values.sm) {\n      preset.left = 265\n    }\n\n    return preset\n  },\n  fabIcon: {\n    marginRight: theme.spacing(1),\n  },\n  input: {\n    margin: theme.spacing(1),\n    marginLeft: 0,\n    width: \"100%\",\n  },\n  reminders: {\n    width: \"100%\",\n    margin: theme.spacing(1),\n    marginLeft: 0,\n    borderRadius: 4,\n    border: \"1px solid rgba(150, 150, 150, 0.4)\",\n    \"& .MuiTypography-root\": {\n      padding: 8,\n    },\n    \"& .MuiSwitch-root\": {\n      float: \"right\",\n    },\n    \":hover\": {\n      border: \"1px solid white\",\n    },\n  },\n  reminderControl: {\n    padding: theme.spacing(1.5),\n    width: \"100%\",\n    display: \"flex\",\n  },\n  reminderOn: {\n    padding: theme.spacing(2),\n  },\n  reminderOff: {\n    padding: 0,\n  },\n  collapse: {\n    \"& .MuiFormControl-root\": {\n      margin: theme.spacing(1),\n      marginLeft: 0,\n      width: \"-webkit-fill-available\",\n    },\n  },\n})\n\nconst mapDispatchToProps = { openSnackbar }\n\n/**\n * Append the redux actions, get the list styled and export it.\n */\nexport default compose(\n  withStyles(styles),\n  connect(null, mapDispatchToProps)\n)(CreateNew)\n"],"sourceRoot":""}